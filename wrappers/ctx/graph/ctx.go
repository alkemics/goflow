// Code generated by goflow DO NOT EDIT.

//go:build !codeanalysis
// +build !codeanalysis

package main

import (
	"context"

	"github.com/alkemics/goflow/example/nodes"
)

/*
 */
type Ctx struct{}

func NewCtx() Ctx {
	return Ctx{}
}

func newCtx(id string) Ctx {
	return Ctx{}
}

/*
 */
func (g *Ctx) Run(ctx context.Context) {

	// __ctx outputs
	var __ctx_ctx context.Context

	// __print_values outputs
	var __print_values_aggregated []interface{}

	// inputs outputs

	// make_slice outputs
	var make_slice_list []int

	// print outputs

	igniteNodeID := "ignite"
	doneNodeID := "done"

	done := make(chan string)
	defer close(done)

	steps := map[string]struct {
		deps        map[string]struct{}
		run         func()
		alreadyDone bool
	}{

		"__ctx": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				__ctx_ctx = ctx
				done <- "__ctx"
			},
			alreadyDone: false,
		},
		"__print_values": {
			deps: map[string]struct{}{
				"make_slice": {},
				igniteNodeID: {},
			},
			run: func() {
				for _, e := range make_slice_list {
					__print_values_aggregated = append(__print_values_aggregated, e)
				}
				done <- "__print_values"
			},
			alreadyDone: false,
		},
		"inputs": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {

				done <- "inputs"
			},
			alreadyDone: false,
		},
		"make_slice": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				make_slice_list = nodes.SliceMaker()
				done <- "make_slice"
			},
			alreadyDone: false,
		},
		"print": {
			deps: map[string]struct{}{
				"__ctx":          {},
				"__print_values": {},
				igniteNodeID:     {},
			},
			run: func() {
				nodes.PrinterCtx(__ctx_ctx, __print_values_aggregated)
				done <- "print"
			},
			alreadyDone: false,
		},
		igniteNodeID: {
			deps: map[string]struct{}{},
			run: func() {
				done <- igniteNodeID
			},
			alreadyDone: false,
		},
		doneNodeID: {
			deps: map[string]struct{}{
				"__ctx":          {},
				"__print_values": {},
				"inputs":         {},
				"make_slice":     {},
				"print":          {},
			},
			run: func() {
				done <- doneNodeID
			},
			alreadyDone: false,
		},
	}

	// Ignite
	ignite := steps[igniteNodeID]
	ignite.alreadyDone = true
	steps[igniteNodeID] = ignite
	go steps[igniteNodeID].run()

	// Resolve the graph
	for resolved := range done {
		if resolved == doneNodeID {
			// If all the graph was resolved, get out of the loop
			break
		}

		for name, step := range steps {
			delete(step.deps, resolved)
			if len(step.deps) == 0 && !step.alreadyDone {
				step.alreadyDone = true
				steps[name] = step
				go step.run()
			}
		}
	}

	return
}
